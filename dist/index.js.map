{"version":3,"sources":["../src/utils/camelCaseKeys.ts","../src/fetchProducts.ts","../src/categories/fetcher.ts","../src/categories/index.ts","../src/index.ts"],"sourcesContent":["export function camelCaseKeys(obj: any): any {\n  if (typeof obj !== 'object' || obj === null) {\n    return obj\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(camelCaseKeys)\n  }\n\n  return Object.fromEntries(\n    Object.entries(obj).map(([key, value]) => {\n      let camelCaseKey = key.replace(/ID/g, 'Id') // Replace \"ID\" with \"Id\"\n      camelCaseKey =\n        camelCaseKey.charAt(0).toLowerCase() + camelCaseKey.slice(1) // Convert first character to lowercase\n      return [camelCaseKey, camelCaseKeys(value)]\n    }),\n  )\n}\n","import { Product } from '../types/types.js'\nimport { camelCaseKeys } from './utils/camelCaseKeys.js'\n\nexport const fetchProducts = async (url: string): Promise<Product[]> => {\n  try {\n    const response = await fetch(url, {\n      headers: {\n        accept: 'application/json, text/javascript, */*; q=0.01',\n        'accept-language': 'en-US,en;q=0.9,is;q=0.8',\n        'content-type': 'application/json; charset=utf-8',\n      },\n    })\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch products')\n    }\n\n    const jsonData = await response.json()\n\n    const products: Product[] = JSON.parse(jsonData.d).data.map(\n      (product: any) => camelCaseKeys(product),\n    )\n\n    return products\n  } catch (error) {\n    throw new Error('Failed to fetch products: ' + error)\n  }\n}\n","import { Category, Fetcher, Product } from '../../types/types.js'\nimport { fetchProducts } from '../fetchProducts.js'\n\n// This function is used to find the maximum number of digits in the ProductID\nfunction maxDigits(list: Product[]): number {\n  let max = list[0].productId.toString().length\n  for (let index = 1; index < list.length; index++) {\n    const digits = list[index].productId.toString().length\n    if (digits > max) {\n      max = digits\n    }\n  }\n\n  return max\n}\n\nexport default function fetcher(category: Category): Fetcher {\n  async function inner() {\n    try {\n      const url = `https://www.vinbudin.is/addons/origo/module/ajaxwebservices/search.asmx/DoSearch?skip=0&count=99999&category=${category}`\n      const photoUrl =\n        'https://www.vinbudin.is/Portaldata/1/Resources/vorumyndir/original'\n\n      const products = await fetchProducts(url)\n\n      const maxIdLength = maxDigits(products)\n\n      // Make sure the productImageUrl is correct by adding leading zeros to the productId\n      return products.map((beverage: Product): Product => {\n        const productIdLength = beverage.productId.toString().length\n\n        return {\n          ...beverage,\n          productImageUrl: `${photoUrl}/${\n            productIdLength < maxIdLength\n              ? parseInt('0'.repeat(maxIdLength - productIdLength))\n              : ''\n          }${beverage.productId}_r.jpg`,\n        }\n      })\n    } catch (err) {\n      console.log(`Error fetching ${category} => `, err)\n    }\n  }\n\n  return inner\n}\n","import { Category, Fetchers } from '../../types/types.js'\nimport fetcher from './fetcher.js'\n\nconst data: Fetchers = {\n  beer: fetcher(Category.Beer),\n  red: fetcher(Category.Red),\n  white: fetcher(Category.White),\n  rose: fetcher(Category.Rose),\n  bubbly: fetcher(Category.Bubbly),\n  fortified: fetcher(Category.Fortified),\n  ciderfruitandblends: fetcher(Category.CiderFruitAndBlends),\n  sakeandmead: fetcher(Category.SakeAndMead),\n  strong: fetcher(Category.Strong),\n  aromatised: fetcher(Category.Aromatised),\n}\n\nexport default data\n","import categories from './categories/index.js'\nimport { Category, CategoryData, CategoryOptions } from '../types/types.js'\n\n/**\n * Fetches products from the Vinbudin API\n * @param options - An object with keys for each category, and a boolean value to determine if the category should be fetched\n * @returns An object with keys for each category, and an array of products as the value\n */\nexport const getProducts = async function (\n  options?: CategoryOptions,\n): Promise<CategoryData> {\n  let data: CategoryData = {}\n  const availableCategories: Category[] = [\n    Category.Beer,\n    Category.Red,\n    Category.White,\n    Category.Rose,\n    Category.Bubbly,\n    Category.Fortified,\n    Category.CiderFruitAndBlends,\n    Category.SakeAndMead,\n    Category.Strong,\n    Category.Aromatised,\n  ]\n\n  // Fetch data for each category by default, unless options are provided\n  for (const category of availableCategories) {\n    if (!options || options[category]) {\n      data[category] = await categories[category]()\n    }\n  }\n\n  return data\n}\n"],"mappings":"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","names":["data"]}