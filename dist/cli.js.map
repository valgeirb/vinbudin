{"version":3,"sources":["../src/cli.ts","../src/index.ts","../src/fetchProducts.ts","../src/categories/fetcher.ts","../src/categories/index.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport fs from 'fs'\nimport inquirer from 'inquirer'\nimport { getProducts } from './index.js'\nimport { Category, CategoryOptions } from '../types/types.js'\n\nasync function promptForOptions() {\n  const answers = await inquirer.prompt([\n    {\n      type: 'checkbox',\n      name: 'products',\n      message: 'Pick what you want to fetch',\n      choices: [\n        { name: 'Beers', value: Category.Beer },\n        { name: 'Red wines', value: Category.Red },\n        { name: 'White wines', value: Category.White },\n        { name: 'Rose wines', value: Category.Rose },\n        { name: 'Sparkling wines', value: Category.Bubbly },\n        { name: 'Dessert wines', value: Category.Fortified },\n        {\n          name: 'Ciders, fruit and blends',\n          value: Category.CiderFruitAndBlends,\n        },\n        { name: 'Sake and mead', value: Category.SakeAndMead },\n        { name: 'Spirits', value: Category.Strong },\n        { name: 'Aromatised wine', value: Category.Aromatised },\n      ],\n      loop: false,\n    },\n  ])\n\n  const options: CategoryOptions = answers.products.reduce(\n    (acc: { [x: string]: boolean }, curr: string | number) => {\n      acc[curr] = true\n\n      return acc\n    },\n    {},\n  )\n\n  return options\n}\n\n;(async function cli() {\n  const options = await promptForOptions()\n  const products = await getProducts(options)\n\n  fs.writeFile(\n    'products.json',\n    JSON.stringify(products, null, 2),\n    'utf8',\n    (err) => {\n      if (err) {\n        return console.log(err)\n      }\n\n      console.log(\"Fetch complete, see './products.json'\")\n    },\n  )\n})()\n","import { Listr } from 'listr2'\nimport categories from './categories/index.js'\nimport { Category, CategoryData, CategoryOptions } from '../types/types.js'\n\nexport const getProducts = async function (\n  options: CategoryOptions = {\n    beer: true,\n    red: true,\n    white: true,\n    rose: true,\n    bubbly: true,\n    fortified: true,\n    ciderfruitandblends: true,\n    sakeandmead: true,\n    strong: true,\n    aromatised: true,\n  },\n): Promise<CategoryData> {\n  let data: CategoryData = {}\n  const availableCategories: Category[] = [\n    Category.Beer,\n    Category.Red,\n    Category.White,\n    Category.Rose,\n    Category.Bubbly,\n    Category.Fortified,\n    Category.CiderFruitAndBlends,\n    Category.SakeAndMead,\n    Category.Strong,\n    Category.Aromatised,\n  ]\n\n  const tasks = new Listr(\n    availableCategories.map((category: Category) => ({\n      title: category,\n      task: async () => {\n        data[category] = await categories[category]()\n      },\n      skip: () => !options[category],\n    })),\n    { concurrent: true },\n  )\n\n  await tasks.run().catch((err) => {\n    console.error('Tasks', err)\n  })\n\n  return data\n}\n","import fetch from 'node-fetch'\nimport { Product } from '../types/types.js'\n\nexport const fetchProducts = async (url: string): Promise<Product[]> => {\n  try {\n    const res = await fetch(url, {\n      headers: {\n        accept: 'application/json, text/javascript, */*; q=0.01',\n        'accept-language': 'en-US,en;q=0.9,is;q=0.8',\n        'content-type': 'application/json; charset=utf-8',\n      },\n      method: 'GET',\n    })\n\n    if (!res.ok) {\n      throw new Error('Failed to fetch products')\n    }\n\n    const jsonData: any = await res.json()\n    const products: Product[] = JSON.parse(jsonData.d).data\n\n    return products\n  } catch (error: any) {\n    throw new Error('Failed to fetch products: ' + error)\n  }\n}\n","import { Category, Product } from '../../types/types.js'\nimport { fetchProducts } from '../fetchProducts.js'\n\n// This function is used to find the maximum number of digits in the ProductID\nfunction maxDigits(list: Product[]): number {\n  let max = list[0].ProductID.toString().length\n  for (let index = 1; index < list.length; index++) {\n    const digits = list[index].ProductID.toString().length\n    if (digits > max) {\n      max = digits\n    }\n  }\n\n  return max\n}\n\nexport default function fetcher(category: Category): any {\n  async function inner() {\n    try {\n      const url = `https://www.vinbudin.is/addons/origo/module/ajaxwebservices/search.asmx/DoSearch?skip=0&count=99999&category=${category}`\n      const photoUrl =\n        'https://www.vinbudin.is/Portaldata/1/Resources/vorumyndir/original'\n\n      const products = await fetchProducts(url)\n\n      const maxIdLength = maxDigits(products)\n\n      // Make sure the ProductImageUrl is correct by adding leading zeros to the ProductID\n      return products.map((beverage: Product): Product => {\n        const productIdLength = beverage.ProductID.toString().length\n\n        return {\n          ...beverage,\n          ProductImageUrl: `${photoUrl}/${\n            productIdLength < maxIdLength\n              ? parseInt('0'.repeat(maxIdLength - productIdLength))\n              : ''\n          }${beverage.ProductID}_r.jpg`,\n        }\n      })\n    } catch (err) {\n      console.log(`Error fetching ${category} => `, err)\n    }\n  }\n\n  return inner\n}\n","import { Category, Fetchers } from '../../types/types.js'\nimport fetcher from './fetcher.js'\n\nconst data: Fetchers = {\n  beer: fetcher(Category.Beer),\n  red: fetcher(Category.Red),\n  white: fetcher(Category.White),\n  rose: fetcher(Category.Rose),\n  bubbly: fetcher(Category.Bubbly),\n  fortified: fetcher(Category.Fortified),\n  ciderfruitandblends: fetcher(Category.CiderFruitAndBlends),\n  sakeandmead: fetcher(Category.SakeAndMead),\n  strong: fetcher(Category.Strong),\n  aromatised: fetcher(Category.Aromatised),\n}\n\nexport default data\n"],"mappings":"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","names":["data"]}